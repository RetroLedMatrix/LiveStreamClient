//
// Created by marco on 15/11/2024.
//

#include <iostream>
#include <sstream>
#include "../../includes/BitmapConverter.h"
#include "../../includes/api/WebSocketClient.h"
#include "../../includes/enums/Commands.h"
#include "../../includes/BrainsBehindScreenshot.h"

WebSocketClient::WebSocketClient(const std::string &address, const std::string &port, const std::string &path)
    : connection(address, port, path) {
}

WebSocketClient::~WebSocketClient() {
    WSACleanup();
}

void WebSocketClient::testAllPixels() const {
    connection.sendMessage(
        R"({"type":"allpixels","data})");
}

void WebSocketClient::reset() const {
    connection.sendMessage(R"({"type":"clear"})");
}

void WebSocketClient::takeScreenShot() {
    std::wstring filename = L"screenshot.bmp";

    if (ScreenCapture::CaptureScreen(filename)) {
        std::wcout << L"Screenshot saved to " << filename << std::endl;
    } else {
        std::wcerr << L"Failed to capture the screen." << std::endl;
    }
}

void WebSocketClient::startStream() {
    int width, height;

    HBITMAP hBitmap = ScreenCapture::CaptureScreenBitmap(width, height);
    if (hBitmap == nullptr) {
        std::cerr << "Screen capture failed." << std::endl;
        return;
    }

    const auto pixels = BitmapConverter::HBitmapToRGB(hBitmap, width, height);
    const auto resizedPixels = BitmapConverter::ResizeImage(pixels, width, height, MATRIX_WIDTH, MATRIX_HEIGHT);
    const auto categorizedPixels = BitmapConverter::CategorizePixels(resizedPixels, MATRIX_WIDTH, MATRIX_HEIGHT);

    const std::string pixelString = BitmapConverter::PixelsToString(categorizedPixels);

    connection.sendMessage(R"({"type":"allpixels","data":")" + pixelString + R"("})");

    DeleteObject(hBitmap);
}

void WebSocketClient::run() {
    WSADATA wsaData;
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        std::cerr << "WSAStartup failed" << std::endl;
        return;
    }

    if (!connection.connect()) {
        std::cerr << "Failed to connect to WebSocket server" << std::endl;
        return;
    }

    printHelp();

    std::string input;
    bool running = true;

    while (running) {
        std::cout << ">>";
        std::getline(std::cin, input);

        if (input.empty()) {
            continue;
        }

        std::istringstream iss(input);
        std::string commandStr;
        std::string argument;
        iss >> commandStr >> argument;

        Commands command = stringToCommand(commandStr);

        switch (command) {
            case EXIT:
                running = false;
                break;
            case ALL:
                testAllPixels();
                break;
            case RESET:
                reset();
                break;
            case STREAM:
                startStream();
                break;
            case HELP:
                printHelp();
                break;
            default:
                std::cout << "Unknown command" << std::endl;
                break;
        }

        // We don't receive any messages from the matrix
        // std::string response = connection.receiveMessage();
        // std::cout << "Received: " << response << std::endl;
    }

    connection.closeConnection();
}
